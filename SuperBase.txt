public object object::SafeGoto(point target)
{
	errmode(0);
	bool first = true;
	while(goto(target) != 0) {
		if(first) {
			message("Unable to goto()", DisplayWarning);
			first = false;
		}
		move(-0.5);
	}
	errmode(1);
}

public object object::GoTo(int cat)
{
	object item = radar(cat);
	SafeGoto(item.position);
	return item;
}

public object object::SafeGrab(int cat)
{
	errmode(0);
	do {
		if(grab() != 0) Get(cat);
		if(this.load.category != cat) {
			drop();
			Get(cat);
		}
	} while(this.load == null);
	errmode(1);
}

public object object::SafeGrabCell()
{
	/*do {
		grab();
		if(this.load.category != PowerCell && this.load.category != NuclearCell) {
			drop();
		}
	} while(this.load == null);*/
	grab();
}

public object object::Get(int cat)
{
	object item = GoTo(cat);
	SafeGrab(cat);
	return item;
}

public object object::Deposit(int cat)
{
	object item = GoTo(cat);
	drop();
	return item;
}

public object object::GetTitanium() 
{
	GetTitanium(true, true);
}

public object object::GetTitanium(bool getReady, bool getPrepared)
{
	object item;
	
	if(getReady) {
		item = radar(Titanium);
		if(item != null) return item;
		if(!getPrepared) {
			do {
				wait(5);
				item = radar(Titanium);
			} while(item == null);
			return item;
		}
	}
	
	if(getPrepared) {
		if(radar(Converter) == null) {
			message("Unable to get Titanium!", DisplayError);
			return null;
		}
		
		item = radar(TitaniumOre);
		SafeGoto(item.position);
		SafeGrab(TitaniumOre);
		item = radar(Converter);
		SafeGoto(item.position);
		drop();
		move(-2.5);
		while((item = radar(Titanium, 0, 90, 2, 5)) == null);
		return item;
	}
	
	return null;
}

public object object::GetCell(bool getReady, bool getPrepared)
{
	object item;
	
	if(getReady) {
		item = radar(PowerCell);
		if(item != null) return item;
		if(!getPrepared) {
			do {
				wait(5);
				item = radar(PowerCell);
			} while(item == null);
			return item;
		}
	}
	
	if(getPrepared) {
		if(radar(PowerPlant) == null) {
			message("Unable to get PowerCell!", DisplayError);
			return null;
		}
		
		item = radar(Titanium);
		SafeGoto(item.position);
		SafeGrab(Titanium);
		item = radar(PowerPlant);
		SafeGoto(item.position);
		drop();
		while(item.energyCell == null || item.energyCell.category != PowerPlant);
		return item;
	}
	
	return null;
}

public object object::Build(int cat)
{
	return Build(cat, flatspace(GetHome(), 8));
}
public object object::Build(int cat, point pos)
{
	object item = GetTitanium(true, false);
	SafeGoto(item.position);
	SafeGrab(Titanium);
	SafeGoto(pos);
	drop();
	build(cat);
	item = radar(cat);
	BatteryCheck();
	return item;
}

public object object::Factory(object obj, int cat, string prog)
{
	object item = GetTitanium(true, false);
	SafeGoto(item.position);
	SafeGrab(Titanium);
	SafeGoto(obj.position);
	drop();
	move(-5);
	point waitpoint = this.position;
	obj.factory(cat, progfunc(prog));
	item = GetCell(true, true);
	SafeGoto(item.position);
	grab();
	if(this.load.energyLevel < 1 && radar(PowerStation) != null) {
		item = radar(PowerStation);
		SafeGoto(item.position);
		while(this.load.energyLevel < 1);
	}
	SafeGoto(waitpoint);
	turn(direction(obj.position));
	while((item = radar(cat, 0, 90, 3, 10)) == null);
	wait(1);
	Deposit(cat);
	move(-10);
	wait(2);
	BatteryCheck();
	return item;
}

public point object::flatspace(point nearThis, float rmin)
{
	point pos;
	float r = 1;
	float a = 1;
	do {
		if(++a == 360) {
			a = 0;
			r ++;
		}
		pos.x = nearThis.x + cos(a) * r;
		pos.y = nearThis.y + sin(a) * r;
		pos = space(pos, rmin, 50, rmin);
	} while(flatground(pos, rmin) < rmin);
	return pos;
}

public bool object::BatteryCheck()
{
	if(this.energyCell != null) {
		if(this.energyCell.energyLevel <= 0.3) {
			bool result = Recharge();
			if(!result) {
				while(this.energyCell == null || this.energyCell.energyLevel <= 0.3) wait(1);
			}
			return true;
		}
	}
	return false;
}

public object object::GetBattery()
{
	object maxEnergyCell = null;
	object usedBatteries[];
	float maxEnergy = -1;
	int j=0;
	for(int i=0;i<500;i++) {
		object item = retobject(i);
		if(item != null) {
			if(item.energyCell != null) {
				usedBatteries[j] = item.energyCell;
				j++;
			}
			if(item.load != null) {
				if(item.load.category == PowerCell ||
				   item.load.category == NuclearCell) {
					usedBatteries[j] = item.load;
					j++;
				}
			}
		}
	}
	for(int i=0;i<500;i++) {
		object item = retobject(i);
		if(item != null) {
			bool used = false;
			for(int j=0;j<sizeof(usedBatteries);j++) {
				if(item == usedBatteries[j]) {
					used = true;
					break;
				}
			}
			if(used) continue;
			if(item.category == NuclearCell && item.energyLevel*100>maxEnergy) {
				maxEnergy = item.energyLevel*100;
				maxEnergyCell = item;
			}
			if(item.category == PowerCell && item.energyLevel>maxEnergy) {
				maxEnergy = item.energyLevel;
				maxEnergyCell = item;
			}
		}
	}
	return maxEnergyCell;
}

public bool object::Recharge()
{
	point start = this.position;
	 
	if(this.energyCell.category == PowerCell) {
		if(radar(PowerStation) != null) {
			object item = radar(PowerStation);
			SafeGoto(item.position);
			while(this.energyCell.energyLevel < 1) wait(0.01);
			SafeGoto(start);
			return true;
		}
		if(radar(PowerCaptor) != null) {
			object item = radar(PowerCaptor);
			SafeGoto(item.position);
			while(this.energyCell.energyLevel < 1) wait(0.01);
			SafeGoto(start);
			return true;
		}
	}
	 
	if(!(this.category == WheeledGrabber ||
	     this.category == TrackedGrabber ||
	     this.category == WingedGrabber ||
	     this.category == LeggedGrabber ||
	     this.category == Subber)) {
		message("Unable to recharge", DisplayError);
		return false;
	}
	 
	if(this.category != Subber) {
		object battery = GetBattery();
		if(battery != null && battery.energyLevel > this.energyCell.energyLevel && ((battery.category == PowerCell && battery.energyLevel > 0.3) || (battery.category == NuclearCell && battery.energyLevel > 0.05))) {
			SafeGoto(battery.position);
			SafeGrabCell();
			drop(Behind);
			grab(EnergyCell);
			drop(InFront);
			grab(Behind);
			drop(EnergyCell);
			SafeGoto(start);
			return true;
		}
		 
		if(radar(NuclearPlant) != null) {
			object plant = radar(NuclearPlant);
			if(plant.energyCell != null) {
				if(plant.energyCell.category == NuclearCell) {
					SafeGoto(plant.position);
					grab();
					drop(Behind);
					grab(EnergyCell);
					drop(InFront);
					grab(Behind);
					drop(EnergyCell);
					grab(InFront);
					SafeGoto(space());
					drop(InFront);
					SafeGoto(start);
					return true;
				} else if(plant.energyCell.category == UraniumOre) {
					SafeGoto(plant.position);
					move(-3);
					while(plant.energyCell.category != NuclearCell) wait(0.01);
					move(3);
					grab(InFront);
					drop(Behind);
					grab(EnergyCell);
					drop(InFront);
					grab(Behind);
					drop(EnergyCell);
					grab(InFront);
					SafeGoto(space());
					drop(InFront);
					SafeGoto(start);
					return true;
				} else {
					if(radar(UraniumOre) != null) {
						SafeGoto(plant.position);
						grab(InFront);
						SafeGoto(space());
						drop(InFront);
					}
				}
			}
			if(radar(UraniumOre) != null) {
				object item = radar(UraniumOre);
				SafeGoto(item.position);
				SafeGrab(UraniumOre);
				SafeGoto(plant.position);
				drop(InFront);
				move(-3);
				while(plant.energyCell.category != NuclearCell) wait(0.01);
				move(3);
				grab(InFront);
				drop(Behind);
				grab(EnergyCell);
				drop(InFront);
				grab(Behind);
				drop(EnergyCell);
				grab(InFront);
				SafeGoto(space());
				drop(InFront);
				SafeGoto(start);
				return true;
			}
		}
		 
		if(radar(PowerPlant) != null) {
			object plant = radar(PowerPlant);
			if(plant.energyCell != null) {
				if(plant.energyCell.category == PowerCell) {
					SafeGoto(plant.position);
					grab(InFront);
					drop(Behind);
					grab(EnergyCell);
					drop(InFront);
					grab(Behind);
					drop(EnergyCell);
					grab(InFront);
					SafeGoto(space());
					drop(InFront);
					SafeGoto(start);
					return true;
				} else if(plant.energyCell.category == Titanium) {
					SafeGoto(plant.position);
					while(plant.energyCell.category != PowerCell) wait(0.01);
					grab(InFront);
					drop(Behind);
					grab(EnergyCell);
					drop(InFront);
					grab(Behind);
					drop(EnergyCell);
					grab(InFront);
					SafeGoto(space());
					drop(InFront);
					SafeGoto(start);
					return true;
				} else {
					if(radar(Titanium) != null) {
						SafeGoto(plant.position);
						grab();
						SafeGoto(space());
						drop(InFront);
					}
				}
			}
			if(radar(Titanium) != null) {
				object item = radar(Titanium);
				SafeGoto(item.position);
				SafeGrab(Titanium);
				SafeGoto(plant.position);
				drop(InFront);
				while(plant.energyCell.category != PowerCell) wait(0.01);
				grab(InFront);
				drop(Behind);
				grab(EnergyCell);
				drop(InFront);
				grab(Behind);
				drop(EnergyCell);
				grab(InFront);
				SafeGoto(space());
				drop(InFront);
				SafeGoto(start);
				return true;
			}
		}
	}
	message("Unable to charge", DisplayError);
	return false;
}

public void object::MoveAll(point nearThis, float range, int cat)
{
	int a=0;
	object[] objectsToMove;
	bool[] objectsDone;
	for(int i=0; i<200; i++) {
		object item = retobject(i);
		if(item == null) continue;
		if(item.category != cat) continue;
		objectsToMove[a++] = item;
	}
	
	for(int i=0; i<a; i++)
	objectsDone[i] = false;
	
	for(int i=0; i<a; i++) {
		while(!objectsDone[i]) {
			SafeGoto(objectsToMove[i].position);
			SafeGrab(cat);
			object item = this.load;
			SafeGoto(space(this.position, 3, 50, 3));
			drop();
			for(int j=0; j<a; j++) if(objectsToMove[j] == item) objectsDone[j] = true;
		}
	}
}

public point object::GetHome()
{
	object item = radar(BlueFlag);
	return item.position;
}

public void object::NewBot()
{
	while(this.energyCell == null);
	wait(3);
	message(this.category+" started!");
}

extern void object::BuildSuperBase()
{
	
	setresearchenable(-1);
	setresearchdone(-1);
	setbuild(-1);
	
	MoveAll(GetHome(), 50, Titanium);
	
	object botFactory = Build(BotFactory);
	object converter = Build(Converter);
	object titaniumCollector = Factory(botFactory, LeggedGrabber, "TitaniumCollector");
	object sniffer = Factory(botFactory, LeggedSniffer, "SnifferProgram");
	SnifferCommunication sniff_comm();
	sniff_comm.searchFor = PowerSpot;
	object radarStation = Build(RadarStation);
	object repairCenter = Build(RepairCenter);
	while(sniff_comm.searchFor != 0) wait(1);
	object powerStation = Build(PowerStation, sniff_comm.foundPos);
	object powerPlant = Build(PowerPlant, flatspace(sniff_comm.foundPos, 8)); //TODO: Check if there is energy
	object thumper = Factory(botFactory, Thumper, "MoveAway");
	object shielder = Factory(botFactory, Shielder, "MoveAway");
	object[] killers;
	for(int i=0; i<3; i++) killers[i] = Factory(botFactory, LeggedShooter, "MoveAway");
	
	while(true) wait(1); // blink the lights :)
	
}

public void object::MoveAway()
{
	NewBot();
	SafeGoto(space());
}

public void object::TitaniumCollector()
{
	NewBot();
	object flag = radar(BlueFlag);
	while(radar(TitaniumOre) != null) {
		object item = GetTitanium(false, true);
		SafeGoto(item.position);
		SafeGrab(Titanium);
		SafeGoto(space(flag.position));
		drop();
		BatteryCheck();
	}
}

public class SnifferCommunication
{
	public static int searchFor = 0;
	public static point foundPos;
}

public void object::SnifferProgram()
{
	MoveAway();
	object item = radar(BlueFlag);
	point home = GetHome();
	
	SnifferCommunication comm();
	while(true) {
		while(comm.searchFor == 0) wait(1);
		
		float r = 1;
		float a = 1;
		point lastPos, pos;
		while(r<60 && radar(comm.searchFor) == null) {
			if(++a == 360) {
				a = 0;
				r += 8;
			}
			pos.x = home.x + cos(a) * r;
			pos.y = home.y + sin(a) * r;
			if(flatground(pos, 8) < 8) continue;
			if(distance(lastPos, pos) < 8) continue;
			lastPos = pos;
			errmode(0);
			if(goto(pos) == 0) sniff();
			errmode(1);
			//produce(pos, 0, WayPoint);
			BatteryCheck();
		}
		
		object item = radar(comm.searchFor);
		if(item == null) {
			comm.foundPos.x = 0;
			comm.foundPos.y = 0;
			comm.foundPos.z = 0;
		} else {
			comm.foundPos = item.position;
		}
		comm.searchFor = 0;
		SafeGoto(space(home));
		BatteryCheck();
	}
}
